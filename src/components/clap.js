/** @jsx jsx */
import { jsx } from "theme-ui"
import gql from "graphql-tag"
import { useState } from "react"
import { motion, useAnimation } from "framer-motion"
import { useMutation } from "@apollo/react-hooks"

import { useLocalStorage } from "../hooks/useLocalStorage"
import theme from "../gatsby-plugin-theme-ui"
import SmallClap from "../components/small-clap"

const UpdateClapsMutation = gql`
  mutation UpdateSong($id: ID!, $inputData: SongStatsInput!) {
    updateSongStats(id: $id, data: $inputData) {
      _id
      claps
    }
  }
`

const CreateSong = gql`
  mutation CreateSong($inputData: SongStatsInput!) {
    createSongStats(data: $inputData) {
      _id
      claps
    }
  }
`

const kFormatter = num => {
  return Math.abs(num) > 999
    ? Math.sign(num) * (Math.abs(num) / 1000).toFixed(1) + "k"
    : Math.sign(num) * Math.abs(num)
}

const Clap = ({ id, spotifyId, claps }) => {
  const controls = useAnimation()
  const popControls = useAnimation()
  const [faunaId, setFaunaId] = useState(id)
  const [userStat, setUserStat] = useLocalStorage("userStat", {})
  const [clapped, setClapped] = useState(!!userStat[spotifyId])
  const [clapCount, setClapCount] = useState(claps)
  const [updateSong, {}] = useMutation(UpdateClapsMutation)
  const [createSong, {}] = useMutation(CreateSong)

  const handleClick = async () => {
    const MAX_CLAP_AMOUNT = 25
    const hasClappedMaxAmount =
      userStat[spotifyId] >= MAX_CLAP_AMOUNT || clapCount >= 10000
    const newClapCount = hasClappedMaxAmount ? clapCount : clapCount + 1
    setClapCount(newClapCount)
    if (clapped) {
      setUserStat({
        ...userStat,
        [spotifyId]: hasClappedMaxAmount
          ? userStat[spotifyId]
          : userStat[spotifyId] + 1,
      })
    } else {
      setUserStat({
        ...userStat,
        [spotifyId]: 1,
      })
    }
    setClapped(true)
    if (!hasClappedMaxAmount) {
      if (clapCount === 0) {
        const mutationResult = await createSong({
          variables: { inputData: { spotifyId, claps: newClapCount } },
        })
        setFaunaId(mutationResult.data.createSongStats._id)
      } else {
        updateSong({
          variables: {
            id: faunaId,
            inputData: { spotifyId, claps: newClapCount },
          },
        })
      }
    }
    animateClick()
  }

  const animateClick = async () => {
    popControls.start({
      opacity: 1,
    })
    await controls.start({
      scale: 1.2,
      opacity: [0.5, 0],
      boxShadow: `0px 0px 2px 5px ${theme.colors.primary}`,
      transition: {
        duration: 1.5,
        type: "spring",
        stiffness: 400,
        damping: 80,
        ease: `easeOut`,
      },
    })
    popControls.start({
      opacity: 0,
    })
    await controls.start({
      scale: 1,
      boxShadow: `0px 0px 0px 0px ${theme.colors.primary}`,
    })
  }

  return (
    <motion.div
      whileHover={{
        scale: 1.05,
        boxShadow: `0px 0px 0px 3px ${theme.colors.secondaryMuted} `,
      }}
      whileTap={{ scale: 0.95 }}
      sx={{
        borderRadius: 500,
        height: 72,
        width: 72,
        position: `relative`,
        cursor: `pointer`,
        display: `grid`,
        gridTemplateColumns: `auto 1fr`,
        gridGap: `3`,
        alignItems: `center`,
      }}
    >
      <motion.div
        sx={{
          position: `absolute`,
          top: 0,
          right: 0,
          left: 0,
          bottom: 0,
          borderRadius: 500,
          zIndex: 2,
          boxShadow: `0px 0px 0px 0px ${theme.colors.primary}`,
        }}
        onClick={handleClick}
        animate={controls}
      ></motion.div>
      {/* <motion.svg
        sx={{ userSelect: `none`, m: 0 }}
        onClick={handleClick}
        style={{
          borderRadius: 500,
          zIndex: 3,
        }}
        initial={{
          boxShadow: `0px 0px 0px 0px #fff`,
        }}
        width="72"
        height="72"
        viewBox="0 0 72 72"
        fill={clapped ? `rgba(28, 122, 218, 0.5)` : `none`}
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          sx={{ stroke: `text` }}
          cx="36"
          cy="36"
          r="35"
          strokeWidth="2"
        />
        <path
          d="M19.93 36.053C18.9769 34.8041 19.0223 32.9539 20.157 31.7976C20.52 31.4275 21.0193 31.15 21.5185 31.0112C21.337 30.5949 21.2462 30.1324 21.2462 29.6698C21.2462 28.791 21.5639 28.0047 22.1539 27.4033C23.2886 26.247 25.0132 26.1545 26.2386 27.0796C26.3748 26.7095 26.5563 26.3395 26.8286 26.0157C27.4186 25.3681 28.2356 24.9518 29.0979 24.9518C29.9148 24.9056 30.7318 25.2294 31.3218 25.8307C31.4125 25.6919 31.5033 25.5069 31.6395 25.4144C32.2295 24.7668 33.0464 24.3505 33.9087 24.3505C34.8165 24.3043 35.6334 24.6743 36.2234 25.2756L40.762 29.8549C41.2612 27.9121 43.0766 26.5708 45.0736 26.802C45.6182 26.8483 46.1174 27.1258 46.4805 27.4959C47.2975 26.5708 48.5683 26.0157 49.8844 26.1545C51.1098 26.2932 52.0629 27.3571 52.0629 28.6522L52.0175 35.3592C52.0175 37.1169 52.2445 38.9208 52.6529 40.4935V40.5398C53.5607 43.7776 52.6529 47.2468 50.3383 49.6058C47.9329 52.0573 44.7105 53.3987 41.352 53.3987C41.0797 53.3987 40.762 53.3987 40.4896 53.3524C39.2188 53.7687 37.8573 54 36.5411 54C33.2734 54 30.0056 52.7511 27.5548 50.2071L18.7954 41.2336C18.2054 40.6323 17.8877 39.7997 17.8877 38.9671C17.8877 38.0883 18.2054 37.3019 18.7954 36.7006C19.1131 36.4231 19.5216 36.1918 19.93 36.053ZM34.9072 26.617C34.6349 26.3395 34.2718 26.247 33.9541 26.247C33.5911 26.247 33.2734 26.432 33.0464 26.6633C32.9103 26.8483 32.8195 27.0796 32.8195 27.3108L40.3081 35.1279L40.535 32.3064L34.9072 26.617ZM49.0221 48.3106C50.8829 46.4142 51.5637 43.6851 50.8829 41.1411C50.3837 39.2909 50.1567 37.3482 50.1567 35.4055L50.2021 28.6985C50.2021 28.421 49.9752 28.1434 49.7029 28.1434C48.5229 28.0047 47.479 28.8835 47.3428 30.0399L47.2521 31.15L47.2067 36.0068C47.2067 37.7645 47.4336 39.5222 47.7967 41.0948C47.7967 41.1411 47.8421 41.1411 47.8421 41.1873C48.7498 44.4252 47.8421 47.8943 45.5274 50.2533C45.3005 50.4846 45.0282 50.7159 44.8013 50.9472C46.3897 50.3921 47.8421 49.5133 49.0221 48.3106ZM20.1116 39.9385L28.871 48.9119C33.0918 53.2137 39.9904 53.2137 44.2112 48.9119C46.0267 47.0617 46.7528 44.3327 46.0721 41.7887V41.7424C45.5728 39.8459 45.3459 37.9495 45.3459 36.0068V29.2998C45.3459 29.0223 45.119 28.7447 44.8466 28.7447C43.6666 28.606 42.6228 29.4848 42.4866 30.6412L42.1689 35.313C42.0781 36.0068 41.6243 36.6081 40.9889 36.8394C40.3081 37.0706 39.6273 36.8856 39.1281 36.4231L30.1418 27.2646C29.8694 26.9871 29.6425 26.8483 29.1887 26.8945C28.8256 26.8945 28.5079 27.0796 28.281 27.3108C27.8725 27.7734 27.9179 28.6985 28.4171 29.2073L35.0888 36.053C35.4519 36.4231 35.4519 37.0244 35.0888 37.3944C34.9072 37.5795 34.6803 37.672 34.408 37.672C34.1811 37.672 33.9088 37.5795 33.7272 37.3944L27.0102 30.5487L25.2401 28.7447C24.7409 28.2359 23.9239 28.2359 23.4247 28.7447C23.1978 28.976 23.0616 29.2998 23.0616 29.6698C23.0616 30.0399 23.1978 30.3637 23.4247 30.5949L31.9572 39.2446C32.3203 39.6147 32.3203 40.216 31.9572 40.586C31.7756 40.771 31.5487 40.8636 31.2764 40.8636C31.0041 40.8636 30.7772 40.771 30.5956 40.586L25.8301 35.7292L23.2886 33.139C22.7893 32.6302 21.9724 32.6302 21.4731 33.139C20.9739 33.6478 20.9739 34.4804 21.4731 34.9892L23.1978 36.7469L24.4686 37.9957L28.8256 42.4362C29.1887 42.8063 29.1887 43.4076 28.8256 43.7776C28.644 43.9627 28.4171 44.0552 28.1448 44.0552C27.8725 44.0552 27.6456 43.9627 27.464 43.7776L21.8816 38.0883C21.3824 37.5795 20.5654 37.5795 20.0662 38.0883C19.8393 38.3195 19.7031 38.6433 19.7031 39.0134C19.7031 39.3834 19.8393 39.7072 20.1116 39.9385ZM26.6925 20.2801L24.3778 15.2383C24.1509 14.7757 23.6063 14.5444 23.1524 14.7757C22.6985 15.007 22.4716 15.5621 22.6985 16.0246L24.9678 21.1127C25.1494 21.4827 25.4671 21.6677 25.8301 21.6677C25.9663 21.6677 26.1025 21.6215 26.2386 21.5752C26.6925 21.3439 26.874 20.7426 26.6925 20.2801ZM32.8195 15.192C32.9557 14.6832 32.638 14.1744 32.1387 14.0356C31.6395 13.8968 31.1402 14.1744 31.0041 14.6832L29.5971 20.0488C29.461 20.5576 29.7787 21.0664 30.2779 21.2051C30.3687 21.2051 30.4595 21.2514 30.5048 21.2514C30.9133 21.2514 31.2764 20.9739 31.4126 20.5576L32.8195 15.192ZM16.5261 21.899L21.4731 24.258C21.6093 24.3043 21.7455 24.3505 21.8816 24.3505C22.2447 24.3505 22.5624 24.1655 22.7439 23.7955C22.9709 23.3329 22.7439 22.7316 22.2901 22.5466L17.3431 20.1876C16.8892 19.9563 16.2992 20.1876 16.1177 20.6501C15.8453 21.1127 16.0723 21.6677 16.5261 21.899Z"
          sx={{ fill: `text` }}
        />
      </motion.svg> */}
      <motion.div
        sx={{
          display: `flex`,
          alignItems: `center`,
          justifyContent: `center`,
          userSelect: `none`,
          m: 0,
          height: 72,
          width: 72,
          background: `linear-gradient(180deg, #9DD0FF 0%, #008BFF 100%)`,
          boxShadow: `inset 0px 0px 4px rgba(0, 0, 0, 0.5)`,
        }}
        onClick={handleClick}
        style={{
          borderRadius: 500,
          zIndex: 3,
        }}
        initial={{
          boxShadow: `0px 0px 0px 0px #fff`,
        }}
      >
        <svg
          width="37"
          height="40"
          viewBox="0 0 37 40"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M4.33736 21.9975C3.41003 20.7824 3.45419 18.9822 4.55816 17.8571C4.91143 17.497 5.39718 17.227 5.88292 17.092C5.70629 16.687 5.61797 16.2369 5.61797 15.7869C5.61797 14.9318 5.92708 14.1667 6.50115 13.5816C7.60512 12.4565 9.28315 12.3665 10.4754 13.2666C10.6079 12.9065 10.7845 12.5465 11.0495 12.2315C11.6236 11.6014 12.4184 11.1964 13.2574 11.1964C14.0523 11.1514 14.8472 11.4664 15.4212 12.0515C15.5095 11.9164 15.5979 11.7364 15.7303 11.6464C16.3044 11.0163 17.0993 10.6113 17.9383 10.6113C18.8215 10.5663 19.6163 10.9263 20.1904 11.5114L24.6063 15.9669C25.092 14.0767 26.8584 12.7715 28.8013 12.9966C29.3313 13.0416 29.817 13.3116 30.1703 13.6716C30.9651 12.7715 32.2016 12.2315 33.4822 12.3665C34.6745 12.5015 35.6018 13.5366 35.6018 14.7968L35.5576 21.3225C35.5576 23.0326 35.7784 24.7878 36.1759 26.318V26.363C37.059 29.5134 36.1759 32.8887 33.9238 35.184C31.5834 37.5692 28.4481 38.8744 25.1803 38.8744C24.9154 38.8744 24.6063 38.8744 24.3413 38.8294C23.1049 39.2344 21.7801 39.4594 20.4995 39.4594C17.3201 39.4594 14.1406 38.2443 11.756 35.769L3.23339 27.0381C2.65933 26.453 2.35022 25.6429 2.35022 24.8328C2.35022 23.9778 2.65933 23.2127 3.23339 22.6276C3.54251 22.3576 3.93993 22.1325 4.33736 21.9975ZM18.9098 12.8165C18.6448 12.5465 18.2916 12.4565 17.9824 12.4565C17.6292 12.4565 17.3201 12.6365 17.0993 12.8615C16.9668 13.0416 16.8785 13.2666 16.8785 13.4916L24.1647 21.0974L24.3855 18.3521L18.9098 12.8165ZM32.6432 33.9238C34.4537 32.0786 35.1161 29.4233 34.4537 26.9481C33.9679 25.1479 33.7471 23.2577 33.7471 21.3675L33.7913 14.8418C33.7913 14.5717 33.5705 14.3017 33.3055 14.3017C32.1574 14.1667 31.1418 15.0218 31.0093 16.1469L30.921 17.227L30.8768 21.9525C30.8768 23.6627 31.0976 25.3729 31.4509 26.9031C31.4509 26.9481 31.495 26.9481 31.495 26.9931C32.3782 30.1434 31.495 33.5188 29.2429 35.814C29.0221 36.0391 28.7572 36.2641 28.5364 36.4891C30.082 35.9491 31.495 35.094 32.6432 33.9238ZM4.514 25.7779L13.0367 34.5089C17.1434 38.6944 23.8556 38.6944 27.9623 34.5089C29.7287 32.7087 30.4352 30.0534 29.7728 27.5781V27.5331C29.2871 25.6879 29.0663 23.8427 29.0663 21.9525V15.4268C29.0663 15.1568 28.8455 14.8868 28.5806 14.8868C27.4324 14.7517 26.4168 15.6068 26.2843 16.732L25.9752 21.2775C25.8869 21.9525 25.4453 22.5376 24.8271 22.7626C24.1647 22.9876 23.5023 22.8076 23.0165 22.3576L14.2731 13.4466C14.0081 13.1766 13.7874 13.0416 13.3458 13.0866C12.9925 13.0866 12.6834 13.2666 12.4626 13.4916C12.0652 13.9417 12.1093 14.8418 12.5951 15.3368L19.0864 21.9975C19.4397 22.3576 19.4397 22.9426 19.0864 23.3027C18.9098 23.4827 18.689 23.5727 18.424 23.5727C18.2032 23.5727 17.9383 23.4827 17.7616 23.3027L11.2261 16.6419L9.50394 14.8868C9.0182 14.3917 8.22334 14.3917 7.73759 14.8868C7.5168 15.1118 7.38432 15.4268 7.38432 15.7869C7.38432 16.1469 7.5168 16.4619 7.73759 16.687L16.0395 25.1029C16.3927 25.4629 16.3927 26.048 16.0395 26.408C15.8628 26.588 15.642 26.678 15.3771 26.678C15.1121 26.678 14.8913 26.588 14.7147 26.408L10.078 21.6825L7.60512 19.1622C7.11937 18.6672 6.32451 18.6672 5.83876 19.1622C5.35302 19.6573 5.35302 20.4674 5.83876 20.9624L7.5168 22.6726L8.75325 23.8877L12.9925 28.2082C13.3458 28.5682 13.3458 29.1533 12.9925 29.5134C12.8159 29.6934 12.5951 29.7834 12.3301 29.7834C12.0652 29.7834 11.8444 29.6934 11.6677 29.5134L6.23619 23.9777C5.75045 23.4827 4.95559 23.4827 4.46984 23.9777C4.24905 24.2028 4.11657 24.5178 4.11657 24.8778C4.11657 25.2379 4.24905 25.5529 4.514 25.7779ZM10.917 6.65086L8.66493 1.74533C8.44413 1.29528 7.91423 1.07026 7.47264 1.29528C7.03105 1.52031 6.81026 2.06036 7.03105 2.51041L9.23899 7.46095C9.41563 7.82099 9.72474 8.00101 10.078 8.00101C10.2105 8.00101 10.343 7.95601 10.4754 7.911C10.917 7.68598 11.0937 7.10091 10.917 6.65086ZM16.8785 1.70029C17.0109 1.20523 16.7018 0.710179 16.2161 0.575165C15.7303 0.44015 15.2446 0.710179 15.1121 1.20523L13.7432 6.4258C13.6107 6.92086 13.9198 7.41591 14.4056 7.55093C14.4939 7.55093 14.5822 7.59593 14.6264 7.59593C15.0238 7.59593 15.3771 7.3259 15.5095 6.92086L16.8785 1.70029ZM1.02545 8.22604L5.83876 10.5213C5.97124 10.5663 6.10372 10.6113 6.23619 10.6113C6.58946 10.6113 6.89858 10.4313 7.07521 10.0712C7.29601 9.62119 7.07521 9.03613 6.63362 8.85611L1.82031 6.56085C1.37872 6.33583 0.804658 6.56085 0.628023 7.0109C0.36307 7.46095 0.583865 8.00101 1.02545 8.22604Z"
            fill="white"
          />
        </svg>
      </motion.div>

      <span sx={{ fontSize: `3`, ml: `1` }}>
        {!!clapCount ? (clapped ? clapCount : kFormatter(clapCount)) : ``}
      </span>
      <motion.div
        animate={popControls}
        initial={{
          opacity: 0,
        }}
        sx={{
          position: `absolute`,
          top: -32,
          width: 72,
          display: `flex`,
          alignItems: `center`,
          justifyContent: `center`,
          zIndex: 10,
        }}
      >
        <span
          sx={{
            borderRadius: 50,
            backgroundColor: `faint`,
            px: `2`,
            py: `1`,
          }}
        >
          {`+${userStat[spotifyId]}`}
        </span>
      </motion.div>
    </motion.div>
  )
}

export default Clap
